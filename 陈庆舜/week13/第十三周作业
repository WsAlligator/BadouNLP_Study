# -*- coding: utf-8 -*-

import torch
import os
import random
import numpy as np
import logging
from config import Config
from model import TorchModel, choose_optimizer
from evaluate import Evaluator
from loader import load_data
from peft import get_peft_model, LoraConfig, \
    PromptTuningConfig, PrefixTuningConfig, PromptEncoderConfig

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

"""
序列标注模型训练主程序（支持PEFT微调策略）
"""

seed = Config["seed"]
random.seed(seed)
np.random.seed(seed)
torch.manual_seed(seed)
torch.cuda.manual_seed_all(seed)


def main(config):
    # 创建保存模型的目录
    if not os.path.isdir(config["model_path"]):
        os.mkdir(config["model_path"])
    # 加载训练数据
    train_data = load_data(config["train_data_path"], config)
    # 加载基础模型
    base_model = TorchModel(config)

    # 大模型微调策略配置
    tuning_tactics = config["tuning_tactics"]
    if tuning_tactics == "lora_tuning":
        # LoRA配置
        peft_config = LoraConfig(
            r=8,
            lora_alpha=32,
            lora_dropout=0.1,
            target_modules=["query", "key", "value"]  # 根据实际模型结构调整
        )
    elif tuning_tactics == "p_tuning":
        # P-tuning配置，序列标注任务使用SEQ_2_SEQ_LM更合适
        peft_config = PromptEncoderConfig(task_type="SEQ_2_SEQ_LM", num_virtual_tokens=10)
    elif tuning_tactics == "prompt_tuning":
        # Prompt-tuning配置
        peft_config = PromptTuningConfig(task_type="SEQ_2_SEQ_LM", num_virtual_tokens=10)
    elif tuning_tactics == "prefix_tuning":
        # Prefix-tuning配置
        peft_config = PrefixTuningConfig(task_type="SEQ_2_SEQ_LM", num_virtual_tokens=10)
    else:
        # 如果没有指定微调策略，直接使用基础模型
        model = base_model
        peft_config = None
        logger.info("未使用PEFT微调策略，将训练完整模型")

    # 应用PEFT配置
    if peft_config is not None:
        model = get_peft_model(base_model, peft_config)
        model.print_trainable_parameters()  # 打印可训练参数信息
        logger.info(f"使用{tuning_tactics}微调策略")

        # 对于LoRA，解冻输出层以便更好地适应序列标注任务
        if tuning_tactics == "lora_tuning":
            # 根据实际模型结构调整需要解冻的层
            if hasattr(model.get_submodule("base_model"), "classifier"):
                for param in model.get_submodule("base_model").classifier.parameters():
                    param.requires_grad = True

    # 标识是否使用gpu
    cuda_flag = torch.cuda.is_available()
    if cuda_flag:
        logger.info("gpu可以使用，迁移模型至gpu")
        model = model.cuda()

    # 加载优化器
    optimizer = choose_optimizer(config, model)
    # 加载效果测试类
    evaluator = Evaluator(config, model, logger)
    # 训练
    for epoch in range(config["epoch"]):
        epoch += 1
        model.train()
        logger.info("epoch %d begin" % epoch)
        train_loss = []
        for index, batch_data in enumerate(train_data):
            optimizer.zero_grad()
            if cuda_flag:
                batch_data = [d.cuda() for d in batch_data]
            input_id, labels = batch_data  # 序列标注任务的输入和标签

            # 对于PEFT模型，调整前向传播和损失计算
            if peft_config is not None:
                outputs = model(input_id)
                # 序列标注通常需要对每个token预测标签，因此需要调整输出维度
                # 假设模型输出的logits在outputs[0]，形状为[batch_size, seq_len, num_labels]
                logits = outputs[0]
                # 计算交叉熵损失，注意需要调整维度
                loss = torch.nn.CrossEntropyLoss()(logits.transpose(1, 2), labels)
            else:
                # 原始模型的损失计算
                loss = model(input_id, labels)

            loss.backward()
            optimizer.step()
            train_loss.append(loss.item())
            if index % int(len(train_data) / 2) == 0:
                logger.info("batch loss %f" % loss)
        logger.info("epoch average loss: %f" % np.mean(train_loss))
        evaluator.eval(epoch)

    # 保存模型
    if peft_config is not None:
        model_path = os.path.join(config["model_path"], f"{tuning_tactics}.pth")
        save_tunable_parameters(model, model_path)  # 保存PEFT模型的可调参数
        logger.info(f"PEFT模型已保存至{model_path}")
    else:
        model_path = os.path.join(config["model_path"], f"epoch_{epoch}.pth")
        torch.save(model.state_dict(), model_path)
        logger.info(f"完整模型已保存至{model_path}")

    return model, train_data


def save_tunable_parameters(model, path):
    """保存只有可调参数的模型，节省存储空间"""
    saved_params = {
        k: v.to("cpu")
        for k, v in model.named_parameters()
        if v.requires_grad
    }
    torch.save(saved_params, path)


if __name__ == "__main__":
    model, train_data = main(Config)
